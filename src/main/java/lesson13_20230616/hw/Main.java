package lesson13_20230616.hw;

/*
Задача: см. класс Philosophers в репозитории

Трое безмолвных философов сидят вокруг круглого стола, перед каждым философом стоит тарелка спагетти.
Вилки лежат на столе между каждой парой ближайших философов.
Каждый философ может либо есть, либо размышлять. Приём пищи не ограничен количеством оставшихся спагетти — подразумевается бесконечный запас.
Тем не менее, философ может есть только тогда, когда держит две вилки — взятую справа и слева.
Каждый философ может взять ближайшую вилку (если она доступна) или положить — если он уже держит её.
Взятие каждой вилки и возвращение её на стол являются раздельными действиями, которые должны выполняться одно за другим.
Вопрос задачи заключается в том, чтобы разработать модель поведения (параллельный алгоритм),
при котором ни один из философов не будет голодать, то есть будет вечно чередовать приём пищи и размышления.

Реализация вышеприведенной задачи подвержена следующим проблемам:
Deadlock — состояние системы, в котором каждый философ взял вилку слева и ждёт, когда вилка справа освободится
Starvation (e.g. livelock) — состояние системы меняется, но она не совершает никакой полезной работы
Unfairness — состояние системы, в котором некоторые философы получают доступ к своим вилкам существенно чаще,
чем остальные философы (такая проблема наблюдается в асимметричных решениях)

В классе Philosophers в репозитории предварительный вариант решения данной задачи.
Через какое-то время при таком решении возникает Deadlock.
- разработать модель поведения, при которой Deadlock будет невозможен
- обобщить задачу до пяти философов
* */
public class Main {
}
